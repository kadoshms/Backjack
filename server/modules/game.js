/**
*	File Name 	: server/modules/game
*	Description	: this module holds all game operations
*	Author		: kadoshms
*/

var winston 		= 	require('winston');
var Room			=	require('./room');

/**
 * Construct a new game manager
 * @param {socket.io} io object
 * @param {object} card map generated by server
 */
function Game(io, map)
{
	game = this;
	this.io = io;
	this.map = map;
}

/**
 * Hit player
 * @param {object} params parameters
 */
Game.prototype.hit = function(params){
	var card = params.room.getDeck().draw();
	winston.log('info', 'player '+params.player.id+' drawed card '+ card + " and value " + game.map[card].value);

	params.player.handCards(card);

	return card;
}

/**
 * Player bet
 * @param {object} params parameters
 */
Game.prototype.bet = function(params){
	var result = params.player.setBet(params.data.bet);

	if ( result ) winston.log('info','player '+params.player.id+' placed bet of '+params.data.bet);
	else winston.log('info','server rejected '+params.player.id+' bet');

	return result;
}

/**
 * Player mark as ready
 * @param {object} param parameters
 */
Game.prototype.ready = function(params){
	var room = params.room;
	params.player.playerReady();

	var readyPlayers = room.getNumOfReadyPlayers();

	// check if there's at least one player ready
	if ( room.status == Room.prototype.STATUS_NO_ACTIVE && readyPlayers >= 1)
	{
		game.startGame(params);
	}
}

/**
 * Start a new game
 * @param {object} param parameters
 */
Game.prototype.startGame = function(params) {
	var room = params.room;

	if ( room.round == 0 )
	{
		room.startNewRound();
	}
	else
	{
		room.reset();
	}
}
module.exports = Game;